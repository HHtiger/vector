{{- $deprecatedConfig := or .Values.logSchema.enabled .Values.vectorApi.enabled .Values.kubernetesLogsSource.enabled .Values.vectorSink.enabled .Values.internalMetricsSource.enabled .Values.hostMetricsSource.enabled .Values.prometheusSink.enabled .Values.sources .Values.transforms .Values.sinks -}}

{{- if (empty .Values.existingConfigMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "libvector.configMapName" . }}
  labels:
    {{- include "libvector.labels" . | nindent 4 }}
data:
  {{- if .Values.customConfig }}
  {{- if and .Values.customConfig $deprecatedConfig }}{{ fail "Can't use deprecated keys with customConfig" }}{{- end }}
  vector.yaml: |
{{ tpl (toYaml .Values.customConfig) . | indent 4 }}
  {{- else if (not $deprecatedConfig) }}
  vector.yaml: |
    # Configuration for Vector.
    # Docs: https://vector.dev/docs/
    data_dir: "/vector-data-dir"
    sources:
      host_metrics:
        type: host_metrics
        filesystem:
          devices:
            excludes: ["binfmt_misc"]
          filesystems:
            excludes: ["binfmt_misc"]
          mountpoints:
            excludes: ["*/proc/sys/fs/binfmt_misc"]
      internal_metrics:
        type: internal_metrics
      kubernetes_logs:
        type: kubernetes_logs
    sinks:
      prometheus_sink:
        type: prometheus_exporter
        inputs: ["host_metrics", "internal_metrics"]
        address: 0.0.0.0:9090
  {{- end }}
  {{- if $deprecatedConfig }}
  # We leave `vector.toml` file name available to let externally managed config
  # maps to provide it.
  managed.toml: |
    {{- if .Values.vectorApi }}
    {{- include "libvector.vectorConfigHeader" . | nindent 4 -}}
    {{- end }}

    {{- if .Values.kubernetesLogsSource }}
    {{- with .Values.kubernetesLogsSource }}
    {{- if .enabled }}
    # Ingest logs from Kubernetes.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "kubernetes_logs" -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sourceId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if .Values.vectorSink -}}
    {{- with .Values.vectorSink -}}
    {{- if .enabled }}
    # Send logs to the aggregator.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "vector" -}}
    {{- $_ := set $value "inputs" (required "You must specify the `inputs` for the built-in vector sink" .inputs) -}}
    {{- $_ := set $value "address" (include "vector-agent.vectorSinkAddress" $) -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sinkId $value | include "libvector.vectorSinkConfig" | nindent 4 -}}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- $prometheusInputs := (list) -}}
    {{- if .Values.hostMetricsSource -}}
    {{- with .Values.hostMetricsSource -}}
    {{- if .enabled }}
    {{- $prometheusInputs = prepend $prometheusInputs .sourceId }}
    # Capture the metrics from the host.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "host_metrics" -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sourceId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end -}}
    {{- end -}}
    {{- end -}}

    {{- merge . (dict "prometheusInputs" $prometheusInputs) | include "libvector.metricsConfigPartial" | nindent 4 -}}

    {{- include "libvector.vectorTopology" .Values | nindent 4 -}}

  {{- end }}
{{- end }}
