{{- $deprecatedConfig := or .Values.logSchema.enabled .Values.vectorApi.enabled .Values.vectorSource.enabled .Values.internalMetricsSource.enabled .Values.prometheusSink.enabled .Values.sources .Values.transforms .Values.sinks -}}

{{- if (empty .Values.existingConfigMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "libvector.configMapName" . }}
  labels:
    {{- include "libvector.labels" . | nindent 4 }}
data:
  {{- if .Values.customConfig }}
  {{- if and .Values.customConfig $deprecatedConfig }}{{ fail "Can't use deprecated keys with customConfig" }}{{- end }}
  vector.yaml: |
{{ tpl (toYaml .Values.customConfig) . | indent 4 }}
  {{- else if (not $deprecatedConfig) }}
  vector.yaml: |
    # Configuration for Vector.
    # Docs: https://vector.dev/docs/
    data_dir: "/vector-data-dir"
    sources:
      internal_metrics:
        type: internal_metrics
      vector:
        type: vector
        address: 0.0.0.0:9000
        version: "2"
    sinks:
      prometheus_sink:
        type: prometheus_exporter
        inputs: ["internal_metrics"]
        address: 0.0.0.0:9090
  {{- end }}
  {{- if $deprecatedConfig }}
  # We leave `vector.toml` file name available to let externally managed config
  # maps to provide it.
  managed.toml: |
    {{- include "libvector.vectorConfigHeader" . | nindent 4 -}}

    {{- with .Values.vectorSource }}
    {{- if .enabled }}
    # Accept logs from Vector agents.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "vector" -}}
    {{- $_ := set $value "address" (printf "%v:%v" .listenAddress .listenPort) -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sourceId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end }}
    {{- end }}

    {{- include "libvector.metricsConfigPartial" . | nindent 4  }}

    {{- include "libvector.vectorTopology" .Values | nindent 4 -}}

  {{- end }}
{{- end }}
